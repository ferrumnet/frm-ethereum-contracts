// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test StakeForm Component It should match the snapshot of StakeStepper on default 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StakeStepper
    amount={1000}
    authorizeStake={[MockFunction]}
    cancel={[MockFunction]}
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    step={null}
    validateStake={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <MultiStepForm
        amount={1000}
        handleChange={[MockFunction]}
        nextStep={[MockFunction]}
        title="Stake"
      />,
      "className": "min-component-height top-padding",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "amount": 1000,
        "handleChange": [MockFunction],
        "nextStep": [MockFunction],
        "title": "Stake",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <MultiStepForm
          amount={1000}
          handleChange={[MockFunction]}
          nextStep={[MockFunction]}
          title="Stake"
        />,
        "className": "min-component-height top-padding",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "amount": 1000,
          "handleChange": [MockFunction],
          "nextStep": [MockFunction],
          "title": "Stake",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`Test StakeForm Component It should match the snapshot of StakeStepper when step is 1 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StakeStepper
    amount={1000}
    authorizeStake={[MockFunction]}
    cancel={[MockFunction]}
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    step={1}
    validateStake={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <MultiStepForm
        amount={1000}
        handleChange={[MockFunction]}
        nextStep={[MockFunction]}
        title="Stake"
      />,
      "className": "min-component-height top-padding",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "amount": 1000,
        "handleChange": [MockFunction],
        "nextStep": [MockFunction],
        "title": "Stake",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <MultiStepForm
          amount={1000}
          handleChange={[MockFunction]}
          nextStep={[MockFunction]}
          title="Stake"
        />,
        "className": "min-component-height top-padding",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "amount": 1000,
          "handleChange": [MockFunction],
          "nextStep": [MockFunction],
          "title": "Stake",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`Test StakeForm Component It should match the snapshot of StakeStepper when step is 2 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StakeStepper
    amount={1000}
    authorizeStake={[MockFunction]}
    cancel={[MockFunction]}
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    step={2}
    validateStake={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <MultiStepCard
        amount={1000}
        buttonName="Approve"
        cancel={[MockFunction]}
        message="Do you want to approve stake of"
        nextStep={[MockFunction]}
        title="Approve Stake"
      />,
      "className": "min-component-height top-padding",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "amount": 1000,
        "buttonName": "Approve",
        "cancel": [MockFunction],
        "message": "Do you want to approve stake of",
        "nextStep": [MockFunction],
        "title": "Approve Stake",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <MultiStepCard
          amount={1000}
          buttonName="Approve"
          cancel={[MockFunction]}
          message="Do you want to approve stake of"
          nextStep={[MockFunction]}
          title="Approve Stake"
        />,
        "className": "min-component-height top-padding",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "amount": 1000,
          "buttonName": "Approve",
          "cancel": [MockFunction],
          "message": "Do you want to approve stake of",
          "nextStep": [MockFunction],
          "title": "Approve Stake",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`Test StakeForm Component It should match the snapshot of StakeStepper when step is 3 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StakeStepper
    amount={1000}
    authorizeStake={[MockFunction]}
    cancel={[MockFunction]}
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    step={3}
    validateStake={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <MultiStepCard
        amount={1000}
        buttonName="Submit"
        cancel={[MockFunction]}
        message="Do you want add a stake of"
        nextStep={[MockFunction]}
        title="Confirm Stake"
      />,
      "className": "min-component-height top-padding",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "amount": 1000,
        "buttonName": "Submit",
        "cancel": [MockFunction],
        "message": "Do you want add a stake of",
        "nextStep": [MockFunction],
        "title": "Confirm Stake",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <MultiStepCard
          amount={1000}
          buttonName="Submit"
          cancel={[MockFunction]}
          message="Do you want add a stake of"
          nextStep={[MockFunction]}
          title="Confirm Stake"
        />,
        "className": "min-component-height top-padding",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "amount": 1000,
          "buttonName": "Submit",
          "cancel": [MockFunction],
          "message": "Do you want add a stake of",
          "nextStep": [MockFunction],
          "title": "Confirm Stake",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
